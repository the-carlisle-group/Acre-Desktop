One problem:
We'll have to find a new way to call `⎕SE.acre.toaplan` as currently it can take any array argument, not just a string or charlist.

Because expressions are linear it's sometimes difficult to see a difference but the following should illustrate.
```
      #.z←⍳2 3
      ]toaplan #.z                  ⍝ 0
[                                        
   (0 0)(0 1)(0 2)                     
   (1 0)(1 1)(1 2)                       
]                                        
      ]toaplan '#.z'                ⍝ 1
[                                        
   (0 0)(0 1)(0 2)                       
   (1 0)(1 1)(1 2)                       ] 
```
The command expects a charlist, ⎕SE.Parser having split it at unquoted blanks and stripped it of quotes. So there's no difference between 0 & 1.
```
      ⎕se.acreAPI.toaplan #.z       ⍝ 2
[                                        
   (0 0)(0 1)(0 2)                       
   (1 0)(1 1)(1 2)                       
]                                        
      ⎕se.acreAPI.toaplan '#.z'     ⍝ 3
'#.z'
```
APL has already evaluated `#.z` before calling the fn in 2 but passes the string `'#.z'` as argument in 3.

My suggestion is that the argument should be the _name_ of a named array or executable expression.

The API framework will then reject any attempt to provide an API function with anything but a string or list.

2 and 3 will then be replaced by
```
      ⎕se.acre.toaplan '⍳2 3'       ⍝ 4
]
   (0 0)(0 1)(0 2)                                                                                            
   (1 0)(1 1)(1 2)                       
]                                        
      ⎕se.acre.toaplan '#.z'        ⍝ 5
]
   (0 0)(0 1)(0 2)                       
   (1 0)(1 1)(1 2)                       
]                                        
```
