 fixValue←{⍺←⊢ ⋄ ren←⍺⊣0
     null ⍵:(3+ren)⍴⊂''
     fqn typ val←,∘⊂¨if(≡⊃)⍵
     fqn typ val{⍺[⍵]}←⊂ord←⍋(≢UT.sp)¨fqn
     ns←(1↓¨MS.AY)dix 1↓¨MS.AZ
     nc←⊃⌊/MS.AY MS.AZ⍳¨⊂typ
     nam←1↓¨1⊃spc nam←↓⍉↑namx¨fqn
     ers←⍳0 2⊣res←0⍴⍨⍴nam
     fixNs←⍎''⎕NS⍨⍕
     fixSrc←{0::0 ⋄ 1⊣(fixNs ⍺).⎕FIX ⍵}
     (x/res)←fixSrc⌿↑spc val/¨⍨⊂x←nc=ns.script
     spc←fixNs eu spc
     data←↓⍉↑(⍳⍴nam)nam spc val
     fixVar←{0::0 ⋄ x n s v←⍵ ⋄ 1⊣s n _is_ ⍺⍺ v}
     fixFn←{0::0 ⋄ x n s v←⍵ ⋄ n≡r←s.⎕FX v:1 ⋄ 0∊∊r:0 ⋄ 1⊣ers⍪←x r}
     fixSrc←{0::0 ⋄ x n s v←⍵ ⋄ n≡r←'.'UT.nn⍕s.⎕FIX v:1 ⋄ 1⊣ers⍪←x r}
     fixClss←~{⍵\~1↓0,fixSrc/0,⍪⍵/⍺}⍣≡

     (x/res)←⊢fixVar/0,⍪data/⍨x←nc=ns.binary
     (x/res)←PL.(decode scrape)fixVar/0,⍪data/⍨x←nc=ns.array
     (x/res)←,¨∘PL.scrape fixVar/0,⍪data/⍨x←nc∊ns.(charlist md)
     (x/res)←↑∘(,¨)∘PL.scrape fixVar/0,⍪data/⍨x←nc=ns.charmat
     (x/res)←{PL.scrape 1↓⊃,/UT.CR,¨⍵}fixVar/0,⍪data/⍨x←nc=ns.charstring
     (x/res)←fixFn/0,⍪data/⍨x←nc∊ns.(function operator)
     (x/res)←(x/data)∘fixClss 1/⍨x←nc∊ns.(class interface)
     x←x\~(x/res)←fixFn/0,⍪data/⍨x←nc∊ns.dyalog  ⍝ dyalog as fn/op ?
     (x/res)←(x/data)∘fixClss 1/⍨x               ⍝ - or ns/cls/int ?
     chg←{(typ≢¨⍵)>typ∊MS.AD MS.MD}nameClass fqn ⍝ chg exc .md .dyalog
     z←{p←⊃'.'UT.pn⊃f t←⍺⊃¨fqn typ ⋄ (⍺⊃typ)←c←⊃nameClass⊢(⍺⊃fqn)←n←p,⍵
         logMsg'⎕',t,' ',f,MS.DO,c,' ',n         ⍝ force to session
     }/ers⍪{⍵,⍪'.'UT.nn¨fqn[⍵]}~∘(⊣/ers){⍵/⍳⍴⍵}res∧chg
     z←logMsg,/(⊂MS.DJ),⍉↑typ' 'fqn/¨⍨⊂~res
     (⍋ord)∘{⍵[⍺]}¨⍣ren⊢((res∨ren)∘/¨fqn typ val),ren/⊂res
⍝ [⍺] 0|1 - compress or return fixed flags - dflt 0
⍝ ⍵ fqn type value
⍝ ← ⍵ fixed - compressed if ⍺=0 or with mask attached if ⍺=1
⍝ this is evaluate post-read where getValue is format pre-write
⍝ Phil 2022-03-15 22:49 Acre  8.3.0+340
 }
