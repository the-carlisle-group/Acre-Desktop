 R←Test_Erase_002(stopFlag batchFlag);⎕TRAP;projectName;projectPath;ref;result;projects;path;list;ref2
⍝ Exercise `Erase` and `Restore` on a namespace.
 ⎕TRAP←(999 'C' '. ⍝ Deliberate error')(0 'N')

 R←T._Failed

 projectName←⊃⎕SI
 projectPath←∆PATH,'/',projectName
 #.⎕SHADOW projectName
 ref←⍎projectName #.⎕NS''
 ref.⎕FX'r←Hello' 'r←''World'''
 ref.⎕FX'r←Hello2' 'r←''World2'''
 ref2←⍎'Sub'ref.⎕NS''
 ref2.⎕FX'r←Hello3' 'r←''World 3'''
 ref2.⎕FX'r←Hello4' 'r←''World 4'''
 ∆ClearLog

 :Trap (~stopFlag)/0
     result←∆RunUcmd'Createproject ',projectPath,' #.',projectName,' -keephistory=on'
 :Else
     →T.GoToTidyUp 1
 :EndTrap

 →T.GoToTidyUp result≢'#.',⊃⎕SI
 projects←∆RunUcmd'Projects'
 path←(⊃projects[(projects[;1]≡¨⊂'#.',projectName)⍳1;2]),'APLSource/'
 list←⊃('recursive' 1)F.Dir path,'*'
 →T.GoToTidyUp 6≠⍴list  ⍝ Quad-Vars script, one folder, 4 functions
 →T.GoToTidyUp 3≠⊃+/0<⎕NC¨projectName{(⊂'#.',⍺),⍺∘{'#.',⍺,'.Sub.',⍵}¨⍵}'Hello3' 'Hello4'
 result←∆RunUcmd'Erase #.',projectName,'.Sub -recursive'
 →T.GoToTidyUp 0∊⍴result
 →T.GoToTidyUp 0≠⊃+/0<⎕NC¨projectName∘{'#.',⍺,'.Sub',⍵}¨'' '.Hello3' '.Hello4'   ⍝ The namespace should not survive!

 list←⊃('recursive' 1)F.Dir path,'*'
 →T.GoToTidyUp 4≠⍴list  ⍝ Quad-Vars script, 2 functions and what once as a namespace (folder): it survives!
 result←projectName∘{∆RunUcmd'Restore #.',⍺,'.',⍵}¨'Sub' 'Sub.Hello3' 'Sub.Hello4' 'DoesNotExist'
 →T.GoToTidyUp 0 1 1 0≢≢¨result
 →T.GoToTidyUp 2≠⊃+/0<⎕NC¨projectName{⍺∘{'#.',⍺,'.Sub.',⍵}¨⍵}'Hello3' 'Hello4'

 R←T._OK

∆TidyUp:
 F.RmDir projectPath
 ∆ClearLog
 ∆RunUcmd'CloseProject #.',projectName
⍝Done
